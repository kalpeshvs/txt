import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

df = pd.read_csv('Social_Network_Ads.csv')
df

df.shape
df.columns
df.dtypes
df.info()
df.describe()
x = df.iloc[:, [2,3]].values
x

y = df.iloc[:, 4].values
y

from sklearn.model_selection import train_test_split as tts

x_train, x_test, y_train, y_test = tts(x, y, test_size=0.25, random_state=42)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.fit_transform(x_test)

from sklearn.linear_model import LogisticRegression

cls = LogisticRegression(random_state=0)
cls.fit(x_train, y_train)

y_pred = cls.predict(x_test)
y_pred

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

from sklearn.metrics import accuracy_score

score = accuracy_score(y_test, y_pred)*100
score

tp = cm[0, [0]]
print(f"True Positive: {tp}")

fp = cm[0, [1]]
print(f"False Positive: {fp}")

tn = cm[1, [0]]
print(f"False Negative: {tn}")

fn = cm[1, [1]]
print(f"True Negative: {fn}")

accuracy_cm = ((tp + tn)/(tp + tn + fp + fn))
print(f"Accuracy: {accuracy_cm*100}")

error_rate_cm = ((fp + fn)/(tp + fp + tn + fn))
print(f"Error Rate: {error_rate_cm*100}")

precision_cm = (tp/(tp+fp))
print(f"Precision: {precision_cm*100}")

recall_cm = (tp/(tp+fn))
print(f"Recall: {recall_cm*100}")

specificity_cm = (tn/(fp+tn))
print(f"Specificity: {specificity_cm*100}")

f1_score = (2*precision_cm*recall_cm/(precision_cm + recall_cm))
print(f"F1 Score: {f1_score*100}")